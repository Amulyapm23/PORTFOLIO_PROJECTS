# -*- coding: utf-8 -*-
"""CREDIT PROJECT .ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18LTXafqv4x0VZfIOZavYyfVpl1bxIrkI

1. IMPORTING THE NECESSARY LIBRARIES
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib import gridspec
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from imblearn.over_sampling import SMOTE
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix, accuracy_score

"""2. LOADING THE DATA

"""

from google.colab import drive
drive.mount('/content/drive')

dataset = pd.read_csv("/content/drive/MyDrive/Internship /creditcard.csv")

"""3. UNDERSATANDING THE DATA

"""

dataset.head()

"""4. DESCRIBING THE DATA

"""

print(dataset.shape)
print(dataset.describe())
print("Class Distribution:")
print(dataset['Class'].value_counts())

from imblearn.over_sampling import SMOTE
from sklearn.model_selection import train_test_split

X=dataset.drop('Class',axis=1)
y=dataset['Class']

X_train,X_test,y_train,y_test=train_test_split(X,y,test_size=0.2,random_state=42)
smote=SMOTE(sampling_strategy='auto',random_state=42)
X_train_resampled,y_train_resampled=smote.fit_resample(X_train,y_train)

print("Balanced Data Overview:")
balanced_data=pd.concat([X_train_resampled, y_train_resampled],axis=1)
print(balanced_data.head())
print("Class Distribution in balanced data:")
print(balanced_data['Class'].value_counts())

print("Missing Values:")
print(dataset.isnull().sum())

scaler = StandardScaler()
dataset['Amount'] = scaler.fit_transform(dataset['Amount'].values.reshape(-1, 1))

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
dataset['Amount'] = scaler.fit_transform(dataset['Amount'].values.reshape(-1, 1))

from sklearn.preprocessing import RobustScaler
scaler = RobustScaler()
dataset['Amount'] = scaler.fit_transform(dataset['Amount'].values.reshape(-1, 1))

dataset['Amount'] = np.log1p(dataset['Amount'])

from scipy import stats
dataset['Amount'] = stats.boxcox(dataset['Amount'] + 1, lmbda=0.01)

fraud = dataset[dataset['Class'] == 1]
valid = dataset[dataset['Class'] == 0]
outlierFraction = len(fraud)/float(len(valid))
print(outlierFraction)
print('Fraud Cases: {}'.format(len(dataset[dataset['Class'] == 1])))
print('Valid Transactions: {}'.format(len(dataset[dataset['Class'] == 0])))

print("Amount details of the fraudulent transaction")
fraud.Amount.describe()

print("details of valid transaction")
valid.Amount.describe()

corrmat = dataset.corr()
fig = plt.figure(figsize = (10, 8))
sns.heatmap(corrmat, vmax = .5, square = True)
plt.show()

X = dataset.drop(['Class'], axis = 1)
Y = dataset["Class"]
print(X.shape)
print(Y.shape)
xData = X.values
yData = Y.values

from sklearn.model_selection import train_test_split
xTrain, xTest, yTrain, yTest = train_test_split(
xData, yData, test_size = 0.2, random_state = 42)

from sklearn.ensemble import RandomForestClassifier
rfc = RandomForestClassifier()
rfc.fit(xTrain, yTrain)
yPred = rfc.predict(xTest)

from sklearn.metrics import classification_report, accuracy_score
from sklearn.metrics import precision_score, recall_score
from sklearn.metrics import f1_score, matthews_corrcoef
from sklearn.metrics import confusion_matrix
n_outliers = len(fraud)
n_errors = (yPred != yTest).sum()
print("The model used is Random Forest classifier")
acc = accuracy_score(yTest, yPred)
print("The accuracy is {}".format(acc))
prec = precision_score(yTest, yPred)
print("The precision is {}".format(prec))
rec = recall_score(yTest, yPred)
print("The recall is {}".format(rec))
f1 = f1_score(yTest, yPred)
print("The F1-Score is {}".format(f1))
MCC = matthews_corrcoef(yTest, yPred)
print("The Matthews correlation coefficient is{}".format(MCC))

LABELS = ['Normal', 'Fraud']
conf_matrix = confusion_matrix(yTest, yPred)
plt.figure(figsize =(12, 12))
sns.heatmap(conf_matrix, xticklabels = LABELS,
yticklabels = LABELS, annot = True, fmt ="d");
plt.title("Confusion matrix")
plt.ylabel('True class')
plt.xlabel('Predicted class')
plt.show()

X = dataset.drop('Class', axis=1)
y = dataset['Class']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
from imblearn.over_sampling import SMOTE
smote = SMOTE(sampling_strategy='auto', random_state=42)
X_train_resampled, y_train_resampled = smote.fit_resample(X_train, y_train)
model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train_resampled, y_train_resampled)

y_pred = model.predict(X_test)

print(confusion_matrix(y_test, y_pred))
print("\nClassification Report:")
print(classification_report(y_test, y_pred))
print("\nAccuracy Score:", accuracy_score(y_test, y_pred))